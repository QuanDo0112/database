package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
	private Join _joinOperator;
	
	public Join() { }

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
    	if (isEquiJoin(p)) {
    		_joinOperator = new HashEquiJoin(p, child1, child2);
    	} else {
    		_joinOperator = new NestedLoopJoin(p, child1, child2);
    	}
    }
    
    private boolean isEquiJoin(JoinPredicate predicate) {
    	return predicate.getOp() == Predicate.Op.EQUALS;
    }

    public TupleDesc getTupleDesc() {
    	return _joinOperator.getTupleDesc();
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
    	_joinOperator.open();
    }

    public void close() {
    	_joinOperator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	_joinOperator.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	return _joinOperator.fetchNext();
    }
}
